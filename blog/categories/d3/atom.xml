<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: D3 | Sebastian Kropp]]></title>
  <link href="http://sebastian.kropponline.de/blog/categories/d3/atom.xml" rel="self"/>
  <link href="http://sebastian.kropponline.de/"/>
  <updated>2015-01-18T22:41:49-05:00</updated>
  <id>http://sebastian.kropponline.de/</id>
  <author>
    <name><![CDATA[Sebastian Kropp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D3 Update Pattern on Nested Data]]></title>
    <link href="http://sebastian.kropponline.de/blog/2013/09/04/d3-update-pattern-on-nested-data/"/>
    <updated>2013-09-04T00:00:00-04:00</updated>
    <id>http://sebastian.kropponline.de/blog/2013/09/04/d3-update-pattern-on-nested-data</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>


<p>This post builds on Mike Bostock&rsquo;s great <a href="http://bost.ocks.org/mike/nest/">tutorial on how selection works on nested data</a> and his <a href="http://bl.ocks.org/mbostock/3808218">series on the update pattern</a>. To make the example more realistic, let us build a table that shows counts of log messages for different applications and for the severity levels <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, and <code>FATAL</code>. The table will update itself to changes in the log count data. Messages could be pushed by WebSockets, but we will just simulate this for now.</p>

<p>Here is how the finished logging table application looks like. Feel free to play around with it.</p>

<div class="panel panel-default">
  <div class="panel-body">
  
<a id="addapp" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-plus"></span> Add App
</a>
<a id="removeapp" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-minus"></span> Remove App
</a>
<a id="updateapp" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-pencil"></span> Update message count
</a>
<br><br>
<div id="nestedUpdateExample"></div>
 </div>
</div>


<script type="text/javascript" src="http://sebastian.kropponline.de/javascripts/d3example/createtable.js"></script>


<p>Try it out on jsFiddle: <a href="http://jsfiddle.net/skropp/k43r9qmc/10/">http://jsfiddle.net/skropp/k43r9qmc/10/</a></p>

<p>You can easily adapt this pattern to show nested bar charts or similar.</p>

<!-- more -->


<p>Let us now reconstruct the code piece by piece and start with looking at only one application. The first goal is to update individual counts. The HTML for the table looks like this.</p>

<p>&#8220;` html</p>

<table class="table table-striped">
    <thead>
        <tr>
            <td>Application Name</td>
            <td>DEBUG</td>
            <td>INFO</td>
            <td>WARN</td>
            <td>ERROR</td>
            <td>FATAL</td>
        </tr>
    </thead>
    <tbody>
        <tr id="Application1"></tr>
    </tbody>
</table>


<pre><code>
This `table` uses Bootsrap CSS classes to make it look a little nicer.  
We are now just hooking us into the `DOM` at `&lt;tr id="Application1"&gt;&lt;/tr&gt;` to create the `&lt;td&gt;`'s on `ENTER` and change the text of the `&lt;td&gt;` on update. This is what is needed to make it work with just a few lines of code.
</code></pre>

<pre><code>var data = ["Application1", 2, 3, 4, 5, 6];

// this is the rendering loop
// similar to a game loop 
function renderLoop(data) {
    // select the row with the id='Application'
    var row = d3.select("#Application1");
    var cell = row.selectAll("td").data(data);

    // UPDATE
    cell
      .text(function (d) {return d;})
      .transition().duration(800)
        .style("color", function(d) {
            if (d3.select(this).attr("data-prevVal") != d) {
                d3.select(this).attr("data-prevVal", d);
                return "red";
            }
            return null;})
      .transition().duration(800)
        .style("color","black");

    //ENTER
    cell.enter()
      .append("td")
        .attr("data-prevVal", function(d){return d;})
        .text(function (d) {return d;});
};

renderLoop(data);
</code></pre>

<p>&#8220;`</p>

<p>This is all normal D3, except that in order to make the changed values light up in red, we have to store the previous value for that cell and compare it with the old one. We have to do that because despite its name <code>UPDATE</code>, D3 is not really detecting updates on the individual value level. <code>UPDATE</code> is executing on each element in the row where a change has occurred and we do not want every cell transition to red.<br/>
We store the value in the <code>DOM</code> with the attribute <code>data-prevVal</code>. Depending on your situation, it might be a better to store these previous values in the property of the javascript <code>DOM</code> element representation itself. This is how D3 does it with the <code>__data__</code> property.<br/>
Additionally it would be better to use the <code>selection.filter()</code> function to prevent <code>UPDATE</code> to fire on the values that have not really changed. But this is advanced and harder to understand.</p>

<p>This is how <code>table</code> looks like for one application:</p>

<div class="panel panel-default">
  <div class="panel-body">
<a id="updateapp1" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-pencil"></span> Update message count
</a>

<table class="table table-striped">
    <thead>
        <tr>
            <td>Application Name</td>
            <td>DEBUG</td>
            <td>INFO</td>
            <td>WARN</td>
            <td>ERROR</td>
            <td>FATAL</td>
        </tr>
    </thead>
    <tbody>
        <tr id="Application1"></tr>
    </tbody>
</table>
 </div>
</div>




<script type="text/javascript" src="http://sebastian.kropponline.de/javascripts/d3example/oneappexample.js"></script>


<p><a href="http://jsfiddle.net/skropp/bkr4ao09/1/">http://jsfiddle.net/skropp/bkr4ao09/1/</a></p>

<p>Calling the <code>renderLoop</code> all the time we change <code>data</code> is a very imperative style of programing. What we actually want is that it automatically re-renders when <code>data</code> changes. We could achieve that by using libraries like <a href="http://reactive-extensions.github.io/RxJS/">RxJS</a> and make <code>data</code> an <code>Observable</code> collection.</p>

<p>Most of the time your JavaScript app is not receiving data in this simple array fashion of <code>var data = ["Application1", 2, 3, 4, 5, 6]</code>. It is likely going to look more like this.</p>

<pre><code class="json ">{
    "name":"Application1",
    "logCounts": {
        "DEBUG": 8,
        "INFO": 12,
        "WARN": 32,
        "ERROR": 47,
        "FATAL": 5
    }
},
{
    "name":"Application2",
    "logCounts": {

...
</code></pre>

<p>You now have two option to adjust to that schema. One is to transform the data into a simple array whenever you receive these types of messages. The other way is to create the schema on read within D3 <code>selection.data()</code> function.</p>

<pre><code class="js">            // UPDATE cell level
            var cell = row.selectAll("td").data(function (d) {
                var rowdata = [{
                    name: "app",
                    value: d.name
                            }];
                return rowdata.concat(keys.map(function (keyname) {
                    return {
                        name: keyname,
                        value: d.logCounts[keyname]
                    };
                }));
            });
</code></pre>

<p>This creates a name-value collection on the fly. Inside our <code>UPDATE</code> and <code>ENTER</code> sections we now reference <code>d.name</code> and <code>d.value</code>.</p>

<pre><code class="js">    cell
        .text(function (d) {return d.value;})
    ...
    // ENTER cell level
    cell.enter()
      .append("td")
        .attr("data-prevVal", function(d){return d.value;})
        .text(function (d) {return d.value;});        
</code></pre>

<p>The other change that you will see in the code is that the <code>table</code> is created from scratch with D3. We cannot work with static <code>table</code> template on the page because we display a message once if there is no data coming in.</p>

<pre><code class="js">    if (data.length &gt; 0) {
        // remove err msg if it was shown previously
        tablediv.select("#logtableerrmsg").remove();
        keys = d3.keys(data[0].logCounts);

        // create table if table does not exist
        if (!table.node()) {
            table = tablediv
              .append("table")
                .attr("id", "logtable")
                .attr("class", "table table-striped");
            table.append("thead").selectAll("tr").data(function () {
                // Add "Application Name" to the header data
                var headerRowData = ["Application Name"];
                return headerRowData.concat(keys);
            })
          // ENTER row level (for table header)
          .enter()
            .append("td").text(function (d) { return d;});
            tbody = table.append("tbody");
</code></pre>

<p>Have fun coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Data Visualization and D3]]></title>
    <link href="http://sebastian.kropponline.de/blog/2013/02/12/big-data-visualization-and-d3/"/>
    <updated>2013-02-12T00:00:00-05:00</updated>
    <id>http://sebastian.kropponline.de/blog/2013/02/12/big-data-visualization-and-d3</id>
    <content type="html"><![CDATA[<p><a href="http://d3js.org/">D3.js</a> is a great JavaScript library to visualize data. Visualization is an overlooked aspect of the Big Data picture. The real value of data is to gain an understanding and act accordingly. Visualization is a great way to make data understandable.</p>

<p>Additionally, as we look closer at &ldquo;Velocity&rdquo; as one of the 3Vs of Big Data, we need mechanisms to ingest and show events immediately. We need libraries that are compatible with our Event-driven architectures. Hey, we finally have WebSockets, let&rsquo;s use them! Maintaining report schedules and running batch processes is so 1990ies and a huge overhead.</p>

<p><img src="/images/d3/d3theme.jpg" title="D3 Theme" ></p>

<!-- more -->


<p>The D3 programming model is declarative and the developer is in full control to express data visually. It has many benefits over other libraries in this area:</p>

<ul>
<li>easy to show changes in data (updates and transitions)</li>
<li>powerful declarative model</li>
<li>easy to learn (lots of <a href="https://github.com/mbostock/d3/wiki/Gallery">examples</a>)</li>
<li>manipulates native DOM elements (reuse your knowledge in CSS, HTML, SVG)</li>
<li>very modular (you do not need everything)</li>
<li>composable (plays nice with others)</li>
</ul>


<h3>How does it compare to JQuery or MVC/MVVM concepts like Angular.js or Knockout.js?</h3>

<p>There is a substantial overlap between these three library concepts. The all have a different focus. But it is sometimes not easy to decide in which case to use which library. They can be used together of course, but here are some guidelines to help you decide.</p>

<h4>JQuery</h4>

<p>D3 can do a lot of what JQuery does in a similar way. Granted, it does not have such a rich gallery of plugins that make JQuery ideal for rapid development. But D3 can be used to attach event handlers to any DOM element or make AJAX data calls as well. JQuery is imperative and gets hard to maintain. I have not worked on a maturing D3 codebase as much as I had to fix bloated JQuery code. Because of D3&rsquo;s declarative nature I am sure that D3 code will not get messy as fast as JQuery code.</p>

<h4>Angular.js/Knockout.js</h4>

<p>Contrary to Angular or Knockout, D3 is not based on templates. These templates help to understand the initial DOM. D3 could be used with an initial DOM structure as well, it is better to completely construct the part of the DOM from scratch. This helps to create encapsulated modules. These modules could be used/attach on any host element in the DOM. It is probably easy to inject D3 functionality into the <a href="http://www.w3.org/TR/shadow-dom/">Shadow DOM</a>, once they are supported by all browsers. If data is changing the initial template completely, templates could be counterproductive. An example would be you start with a <code>table</code> and get data that requires you to switch over to a <code>SVG</code>. Angular.js offers obviously much more in terms of MVC encapsulation, site navigation/history etc. But it is amazing how much similarity and overlap there is. Core to all of them is the data binding and selectors. D3 is the only real declarative option. There are still a lot of for loops in Angular/Knockout templates. You could probably tweak Angular to do the same things as D3 and vice versa. But I would recommend using the different libraries in conjunction and use them according to their respective focus. And yes agreed, that is sometimes easier said than done, especially with Angular.js.</p>

<p>There are also some downsides to D3. There is this issues that all these libraries have with SEO. Or rather it is Google&rsquo;s and Bing’s problem that their crawlers are not indexing JavaScript generated DOMs. This has to change! Another issue with D3 is that it is sometimes hard to understand the side effects, especially if working with nested data. For example if you have multiple pie charts which need to appear and disappear, and these charts have changing data themselves. This is especially hard for programmers who have little experience with functional languages/concepts.</p>

<p>Hopefully I will be able to find some time to write a post about update patterns on nested data eventually to show you how this can be done with D3.</p>

<p><strong>[Update 05/22/2013]</strong>
<em>I finally got around to write something up. Have a look at <a href="/blog/2013/05/22/d3-update-pattern-on-nested-data">D3 Update Pattern on Nested Data</a>. This will help you to understand how to handle updates to nested data.</em></p>
]]></content>
  </entry>
  
</feed>
