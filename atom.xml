<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sebastian Kropp]]></title>
  <link href="http://sebastian.kropponline.de/atom.xml" rel="self"/>
  <link href="http://sebastian.kropponline.de/"/>
  <updated>2014-12-18T11:04:51-05:00</updated>
  <id>http://sebastian.kropponline.de/</id>
  <author>
    <name><![CDATA[Sebastian Kropp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Health Care Intervention Optimization]]></title>
    <link href="http://sebastian.kropponline.de/blog/2014/12/17/health-care-intervention-optimization/"/>
    <updated>2014-12-17T11:22:31-05:00</updated>
    <id>http://sebastian.kropponline.de/blog/2014/12/17/health-care-intervention-optimization</id>
    <content type="html"><![CDATA[<p><a href="http://sebastian.kropponline.de/intervention-optimization-engine/" target="_blank">Intervention Optimization Engine</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[D3 Update Pattern on Nested Data]]></title>
    <link href="http://sebastian.kropponline.de/blog/2013/09/04/d3-update-pattern-on-nested-data/"/>
    <updated>2013-09-04T00:00:00-04:00</updated>
    <id>http://sebastian.kropponline.de/blog/2013/09/04/d3-update-pattern-on-nested-data</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="http://d3js.org/d3.v3.min.js"></script>


<p>This post builds on Mike Bostock&rsquo;s great <a href="http://bost.ocks.org/mike/nest/">tutorial on how selection works on nested data</a> and his <a href="http://bl.ocks.org/mbostock/3808218">series on the update pattern</a>. To make the example more realistic, let us build a table that shows counts of log messages for different applications and for the severity levels <code>DEBUG</code>, <code>INFO</code>, <code>WARN</code>, <code>ERROR</code>, and <code>FATAL</code>. The table will update itself to changes in the log count data. Messages could be pushed by WebSockets, but we will just simulate this for now.</p>

<p>Here is how the finished logging table application looks like. Feel free to play around with it.</p>

<div class="panel panel-default">
  <div class="panel-body">
  
<a id="addapp" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-plus"></span> Add App
</a>
<a id="removeapp" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-minus"></span> Remove App
</a>
<a id="updateapp" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-pencil"></span> Update message count
</a>
<br><br>
<div id="nestedUpdateExample"></div>
 </div>
</div>


<script type="text/javascript" src="http://sebastian.kropponline.de/javascripts/d3example/createtable.js"></script>


<p>Try it out on jsFiddle: <a href="http://jsfiddle.net/skropp/k43r9qmc/10/">http://jsfiddle.net/skropp/k43r9qmc/10/</a></p>

<p>You can easily adapt this pattern to show nested bar charts or similar.</p>

<!-- more -->


<p>Let us now reconstruct the code piece by piece and start with looking at only one application. The first goal is to update individual counts. The HTML for the table looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table table-striped&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>Application Name<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>DEBUG<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>INFO<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>WARN<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>ERROR<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>            <span class="nt">&lt;td&gt;</span>FATAL<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>        <span class="nt">&lt;tr</span> <span class="na">id=</span><span class="s">&quot;Application1&quot;</span><span class="nt">&gt;&lt;/tr&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>table</code> uses Bootsrap CSS classes to make it look a little nicer.<br/>
We are now just hooking us into the <code>DOM</code> at <code>&lt;tr id="Application1"&gt;&lt;/tr&gt;</code> to create the <code>&lt;td&gt;</code>&rsquo;s on <code>ENTER</code> and change the text of the <code>&lt;td&gt;</code> on update. This is what is needed to make it work with just a few lines of code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Application1&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is the rendering loop</span>
</span><span class='line'><span class="c1">// similar to a game loop </span>
</span><span class='line'><span class="kd">function</span> <span class="nx">renderLoop</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// select the row with the id=&#39;Application&#39;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">row</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#Application1&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cell</span> <span class="o">=</span> <span class="nx">row</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;td&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// UPDATE</span>
</span><span class='line'>    <span class="nx">cell</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">d</span><span class="p">;})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">800</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;color&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-prevVal&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-prevVal&quot;</span><span class="p">,</span> <span class="nx">d</span><span class="p">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;red&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="p">;})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">().</span><span class="nx">duration</span><span class="p">(</span><span class="mi">800</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">style</span><span class="p">(</span><span class="s2">&quot;color&quot;</span><span class="p">,</span><span class="s2">&quot;black&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//ENTER</span>
</span><span class='line'>    <span class="nx">cell</span><span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;td&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-prevVal&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">;})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">d</span><span class="p">;});</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">renderLoop</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is all normal D3, except that in order to make the changed values light up in red, we have to store the previous value for that cell and compare it with the old one. We have to do that because despite its name <code>UPDATE</code>, D3 is not really detecting updates on the individual value level. <code>UPDATE</code> is executing on each element in the row where a change has occurred and we do not want every cell transition to red.<br/>
We store the value in the <code>DOM</code> with the attribute <code>data-prevVal</code>. Depending on your situation, it might be a better to store these previous values in the property of the javascript <code>DOM</code> element representation itself. This is how D3 does it with the <code>__data__</code> property.<br/>
Additionally it would be better to use the <code>selection.filter()</code> function to prevent <code>UPDATE</code> to fire on the values that have not really changed. But this is advanced and harder to understand.</p>

<p>This is how <code>table</code> looks like for one application:</p>

<div class="panel panel-default">
  <div class="panel-body">
<a id="updateapp1" class="btn btn-default" role="button">
    <span class="glyphicon glyphicon-pencil"></span> Update message count
</a>

<table class="table table-striped">
    <thead>
        <tr>
            <td>Application Name</td>
            <td>DEBUG</td>
            <td>INFO</td>
            <td>WARN</td>
            <td>ERROR</td>
            <td>FATAL</td>
        </tr>
    </thead>
    <tbody>
        <tr id="Application1"></tr>
    </tbody>
</table>
 </div>
</div>




<script type="text/javascript" src="http://sebastian.kropponline.de/javascripts/d3example/oneappexample.js"></script>


<p><a href="http://jsfiddle.net/skropp/bkr4ao09/1/">http://jsfiddle.net/skropp/bkr4ao09/1/</a></p>

<p>Calling the <code>renderLoop</code> all the time we change <code>data</code> is a very imperative style of programing. What we actually want is that it automatically re-renders when <code>data</code> changes. We could achieve that by using libraries like <a href="http://reactive-extensions.github.io/RxJS/">RxJS</a> and make <code>data</code> an <code>Observable</code> collection.</p>

<p>Most of the time your JavaScript app is not receiving data in this simple array fashion of <code>var data = ["Application1", 2, 3, 4, 5, 6]</code>. It is likely going to look more like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Application1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;logCounts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;DEBUG&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;INFO&quot;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;WARN&quot;</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;ERROR&quot;</span><span class="p">:</span> <span class="mi">47</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;FATAL&quot;</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span><span class="s2">&quot;Application2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;logCounts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>You now have two option to adjust to that schema. One is to transform the data into a simple array whenever you receive these types of messages. The other way is to create the schema on read within D3 <code>selection.data()</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>        <span class="c1">// UPDATE cell level</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cell</span> <span class="o">=</span> <span class="nx">row</span><span class="p">.</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;td&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">rowdata</span> <span class="o">=</span> <span class="p">[{</span>
</span><span class='line'>                <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">value</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>                        <span class="p">}];</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">rowdata</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">keys</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">keyname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="nx">keyname</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">value</span><span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">logCounts</span><span class="p">[</span><span class="nx">keyname</span><span class="p">]</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}));</span>
</span><span class='line'>        <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a name-value collection on the fly. Inside our <code>UPDATE</code> and <code>ENTER</code> sections we now reference <code>d.name</code> and <code>d.value</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">cell</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">value</span><span class="p">;})</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// ENTER cell level</span>
</span><span class='line'><span class="nx">cell</span><span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;td&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-prevVal&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">value</span><span class="p">;})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">value</span><span class="p">;});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other change that you will see in the code is that the <code>table</code> is created from scratch with D3. We cannot work with static <code>table</code> template on the page because we display a message once if there is no data coming in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// remove err msg if it was shown previously</span>
</span><span class='line'>    <span class="nx">tablediv</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="s2">&quot;#logtableerrmsg&quot;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">keys</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">logCounts</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create table if table does not exist</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">table</span><span class="p">.</span><span class="nx">node</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">table</span> <span class="o">=</span> <span class="nx">tablediv</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;table&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="s2">&quot;logtable&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;class&quot;</span><span class="p">,</span> <span class="s2">&quot;table table-striped&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">table</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;thead&quot;</span><span class="p">).</span><span class="nx">selectAll</span><span class="p">(</span><span class="s2">&quot;tr&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Add &quot;Application Name&quot; to the header data</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">headerRowData</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;Application Name&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">headerRowData</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">keys</span><span class="p">);</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>      <span class="c1">// ENTER row level (for table header)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">enter</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;td&quot;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">d</span><span class="p">;});</span>
</span><span class='line'>        <span class="nx">tbody</span> <span class="o">=</span> <span class="nx">table</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s2">&quot;tbody&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have fun coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Hadoop Does Not Scale]]></title>
    <link href="http://sebastian.kropponline.de/blog/2013/08/22/how-hadoop-does-not-scale/"/>
    <updated>2013-08-22T00:00:00-04:00</updated>
    <id>http://sebastian.kropponline.de/blog/2013/08/22/how-hadoop-does-not-scale</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://sebastian.kropponline.de/images/hadoop/hadoop-elephant.png" width="240" title="Hadoop Logo" ></p>

<p>We currently read a lot about how good Hadoop scales by mapping data and processes out to commodity nodes. To disappoint you right away, this post is not a general criticism of Hadoop. I do not even want to argue that Hadoop does not scale logarithmically. There are already a lot of papers that look at which algorithms are suited for MapReduce.</p>

<p>The purpose of this post is to look at slightly different aspects of scale, mostly aspects from an enterprise and financial viewpoint. The meaning of Hadoop changes rapidly. When I refer to Hadoop, I mean the traditional way of batch processing with MapReduce and not the amazing community of ambitious developers trying to find better ways for society to cope with the Big Data challenge.</p>

<h3>Why Hadoop does not scale</h3>

<!-- more -->


<h4>Management and Costs</h4>

<p>Let us start with the management problems associated with maintaining a lot of systems in a cluster. Every additional server puts a lot of pressure on an enterprise. It is not only capital expenditures and operational costs of maintaining the systems. There is also asset management, finance, budget planning, networking, increased energy costs, additional cooling, space requirements, and a lot of other things that need to be considered. Numbers for capital and operational expenses vary widely depending on the maturity of an organization. I would love to see studies on this topic. My guess would be that even the indirectly associated costs are substantial. Once you made this investment, it needs to be utilized. Batch jobs require resources only during their execution and create peak workloads. How do you effectively utilize the cluster when jobs finish? How do you plan the schedule and how can you forecast job utilization to even out the workloads?</p>

<h4>Virtualization and the Cloud</h4>

<p>With this utilization model, virtualization would be a great use case for Hadoop because it could offer the needed elasticity of compute resources. Virtualization tools would also be of great help in managing the cluster with provisioning automation and service management integration (self-service/ticketing of resource allocation). Problem is, that Hadoop was not designed for the cloud. It would be hard for YARN to discover the real topology of the underlying hardware, since virtualization hides that. On top of that, how much virtualization can a system take before it becomes inefficient? We have the hardware abstraction by the kernel, then the Java Virtual Machine and byte code. If you put that on top of another virtual layer which itself again has some abstractions, it is a long way for the instruction to reach the metal. Could system-level virtualization like Linux Containers or FreeBSD Jails help?</p>

<h4>Language</h4>

<p>Java and other garbage collected languages are not necessarily the best fit for big data. With managing a lot of data, developers will eventually have to deal with tuning the garbage collector. The memory model could be inefficient in other ways too. Java has no unsigned numbers, not many ways to affect memory alignment to optimize cache lines, no complex value types like <code>structs</code>, and a lot of heap allocation in general. The Java language and libraries often endorse memory sharing instead of messaging. Messaging constructs with share nothing memory models are considered easier to parallelize and scale. Map, reduce and filter concepts have had a place in functional languages for a long time. This is where map and reduce belongs, in a language. Unfortunately Java has very little support for functional concepts and Hadoop had to be attached on top of it, instead of being integrated in the language. I guess that became apparent and gave rise to higher level languages like Pig had to be introduced to the ecosystem. Now developers have to learn new languages which fragments the pool of developers even further and makes it hard to hire top talent or move that talent inside the enterprise. Additionally the community has to take on developing new languages, which is by no means an easy task. Maybe it might have been a good idea to learn from what functional language research and process algebra had to offer. Was there really a need to reinvent the wheel? Languages like Communicating Sequential Processes <a href="http://en.wikipedia.org/wiki/Communicating_sequential_processes">(CSP)</a> have channels that the MapReduce jobs could be abstracted upon. Why not use a functional language that takes care of distributing the workload efficiently itself, maybe with the help of parameterized functions where the parameters explain the infrastructure topology and expected volumes/loads. Libraries in modern object oriented languages like C# and C++ expand into this space with <code>lambdas</code> and libraries like <a href="http://en.wikipedia.org/wiki/Parallel_Extensions#Task_Parallel_Library">TPL</a>, <a href="http://en.wikipedia.org/wiki/Parallel_Patterns_Library">PPL</a>, and <a href="http://en.wikipedia.org/wiki/Threading_Building_Blocks">TBB</a>. Common to these libraries is that they make use of <code>promises</code> and <code>futures</code>, which essentially creates message channels between threads and enables truly amazing parallelism. Java will hopefully follow suit with Java 8.</p>

<h4>Scaling transistors vs scaling a cluster</h4>

<p><a href="http://en.wikipedia.org/wiki/Moore%27s_law">Moore&rsquo;s law</a> has proven to be good so far. Transistors are doubling every 18 month or so. Hadoop makes use of this exponential growth as well, but not nearly as good as it could. There is no build in way to make use of GPU or other hardware acceleration. Of course you can build that into your distributed functions, but it is not practical for a couple of reasons. In order to make use of the exponential growth, the environment needs to make efficient use of the die. Hadoop lacks that capability. If you want to scale better you make use of the nano-scale.</p>

<blockquote><p>There&#8217;s Plenty of Room at the Bottom</p><footer><strong>Richard Feynman</strong> <cite><a href='http://en.wikipedia.org/wiki/There&#39;s_Plenty_of_Room_at_the_Bottom'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<h4>Batch</h4>

<p>For a lot of use cases it is not the most efficient way to design your system with a sequence of batch processes. It is computationally very expensive to recalculate the whole batch just because some data changed. Often the delta that this new data represents can be integrated without a complete re-run. If your current analytics runs days and you need to go to hours, Hadoop is your tool. If you need to go from days to seconds, Hadoop is a dead end. In this case you need to go for an <a href="http://en.wikipedia.org/wiki/Event-driven_architecture">event-driven architecture</a>.</p>

<h4>Measure and compare scalability</h4>

<p>It is hard to measure scalability. The question, would it have been cheaper to build the system in another way, is rarely answered. Hey, you finally have a solution and it works. Who would build the same thing differently just to confirm hypotheses (except science)? All these arguments I made on &ldquo;Why Hadoop does not scale&rdquo; are hypotheses and would have to be proven and applied to your specific context. But keep in mind, the claims that it does scale are equally unproven and it all depends on which objective it is measured against.
But one strong indication for Hadoop’s suboptimal model is the probably biggest compute system called Bitcoin. Bitcoin is a very interesting case, because it is directly measured financially and different approaches compete within these metrics. How fast, how much energy, how much initial costs, operating costs? Well, is this a fair comparison? I would say yes and if to just to prove that Hadoop is not for ideal for everything. The block chain can be compared with HDFS, the miners are distributed on different nodes and they receive data and compute new data.</p>

<p>So if we look at Bitcoin we notice:</p>

<ul>
<li>it is not build on Hadoop</li>
<li>no JVM but native computation</li>
<li>it first utilized multicore architectures</li>
<li>then it harnessed GPU computation</li>
<li>GPU&rsquo;s were superseded by FPGAs</li>
<li>next was the design of optimized <a href="http://en.wikipedia.org/wiki/Application-specific_integrated_circuit">ASIC&rsquo;s</a></li>
<li>and only then pooling of nodes made sense</li>
</ul>


<h3>Why Hadoop does scale</h3>

<p>There are obviously reasons for why and how Hadoop <em>does</em> scale.</p>

<h4>Commodity nodes</h4>

<p>Sure, make use of the industry at a whole by piggy backing on advances driven by the big scales of commodity hardware. Supercomputers have long shifted to cluster commodity hardware. But commodity hardware includes more than desktops/servers. Do not forget all the nice gaming stuff like GPUs and physics accelerators, FPGA, etc. But as saw earlier, Hadoop, being a toy elephant himself, has problems playing with GPUs.</p>

<h4>Linux as an operating system</h4>

<p>Saving money by using a <em>&ldquo;free&rdquo;</em> OS is good, if you have a lot of nodes. On top of it, it will save a lot of time trying to understand Microsoft&rsquo;s licensing terms, which seems to double in complexity every 18 month. Additionally it is ideal to automate provisioning processes with UNIX based operating systems.</p>

<h4>No SQL databases</h4>

<p>Saving again on licenses. Most of analytics does not rely on ACID requirements anyway and eventual consistency is good enough. It is much easier to cluster these systems.</p>

<h4>Open Source</h4>

<p>Being able to sit on shoulders of a vibrant community is great. Enterprises can break their dependency from enterprise software vendors like IBM, Oracle or Microsoft. Additionally it ensures access to young talent in this area.</p>

<h3>Other References</h3>

<p><a href="https://wiki.apache.org/hadoop/Virtual%20Hadoop">Virtual Hadoop</a><br/>
<a href="http://www.theregister.co.uk/2010/09/24/google_percolator/">Google Percolator – global search jolt sans MapReduce comedown</a><br/>
<a href="http://www.nytimes.com/external/gigaom/2010/10/23/23gigaom-beyond-hadoop-next-generation-big-data-architectu-81730.html">Beyond Hadoop: Next-Generation Big Data Architectures</a><br/>
<a href="http://gigaom.com/2012/07/07/why-the-days-are-numbered-for-hadoop-as-we-know-it/">Why the days are numbered for Hadoop as we know it</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Data Visualization and D3]]></title>
    <link href="http://sebastian.kropponline.de/blog/2013/02/12/big-data-visualization-and-d3/"/>
    <updated>2013-02-12T00:00:00-05:00</updated>
    <id>http://sebastian.kropponline.de/blog/2013/02/12/big-data-visualization-and-d3</id>
    <content type="html"><![CDATA[<p><a href="http://d3js.org/">D3.js</a> is a great JavaScript library to visualize data. Visualization is an overlooked aspect of the Big Data picture. The real value of data is to gain an understanding and act accordingly. Visualization is a great way to make data understandable.</p>

<p>Additionally, as we look closer at &ldquo;Velocity&rdquo; as one of the 3Vs of Big Data, we need mechanisms to ingest and show events immediately. We need libraries that are compatible with our Event-driven architectures. Hey, we finally have WebSockets, let&rsquo;s use them! Maintaining report schedules and running batch processes is so 1990ies and a huge overhead.</p>

<p><img src="http://sebastian.kropponline.de/images/d3/d3theme.jpg" title="D3 Theme" ></p>

<!-- more -->


<p>The D3 programming model is declarative and the developer is in full control to express data visually. It has many benefits over other libraries in this area:</p>

<ul>
<li>easy to show changes in data (updates and transitions)</li>
<li>powerful declarative model</li>
<li>easy to learn (lots of <a href="https://github.com/mbostock/d3/wiki/Gallery">examples</a>)</li>
<li>manipulates native DOM elements (reuse your knowledge in CSS, HTML, SVG)</li>
<li>very modular (you do not need everything)</li>
<li>composable (plays nice with others)</li>
</ul>


<h3>How does it compare to JQuery or MVC/MVVM concepts like Angular.js or Knockout.js?</h3>

<p>There is a substantial overlap between these three library concepts. The all have a different focus. But it is sometimes not easy to decide in which case to use which library. They can be used together of course, but here are some guidelines to help you decide.</p>

<h4>JQuery</h4>

<p>D3 can do a lot of what JQuery does in a similar way. Granted, it does not have such a rich gallery of plugins that make JQuery ideal for rapid development. But D3 can be used to attach event handlers to any DOM element or make AJAX data calls as well. JQuery is imperative and gets hard to maintain. I have not worked on a maturing D3 codebase as much as I had to fix bloated JQuery code. Because of D3&rsquo;s declarative nature I am sure that D3 code will not get messy as fast as JQuery code.</p>

<h4>Angular.js/Knockout.js</h4>

<p>Contrary to Angular or Knockout, D3 is not based on templates. These templates help to understand the initial DOM. D3 could be used with an initial DOM structure as well, it is better to completely construct the part of the DOM from scratch. This helps to create encapsulated modules. These modules could be used/attach on any host element in the DOM. It is probably easy to inject D3 functionality into the <a href="http://www.w3.org/TR/shadow-dom/">Shadow DOM</a>, once they are supported by all browsers. If data is changing the initial template completely, templates could be counterproductive. An example would be you start with a <code>table</code> and get data that requires you to switch over to a <code>SVG</code>. Angular.js offers obviously much more in terms of MVC encapsulation, site navigation/history etc. But it is amazing how much similarity and overlap there is. Core to all of them is the data binding and selectors. D3 is the only real declarative option. There are still a lot of for loops in Angular/Knockout templates. You could probably tweak Angular to do the same things as D3 and vice versa. But I would recommend using the different libraries in conjunction and use them according to their respective focus. And yes agreed, that is sometimes easier said than done, especially with Angular.js.</p>

<p>There are also some downsides to D3. There is this issues that all these libraries have with SEO. Or rather it is Google&rsquo;s and Bing’s problem that their crawlers are not indexing JavaScript generated DOMs. This has to change! Another issue with D3 is that it is sometimes hard to understand the side effects, especially if working with nested data. For example if you have multiple pie charts which need to appear and disappear, and these charts have changing data themselves. This is especially hard for programmers who have little experience with functional languages/concepts.</p>

<p>Hopefully I will be able to find some time to write a post about update patterns on nested data eventually to show you how this can be done with D3.</p>

<p><strong>[Update 05/22/2013]</strong>
<em>I finally got around to write something up. Have a look at <a href="http://sebastian.kropponline.de/blog/2013/05/22/d3-update-pattern-on-nested-data">D3 Update Pattern on Nested Data</a>. This will help you to understand how to handle updates to nested data.</em></p>
]]></content>
  </entry>
  
</feed>
